digraph cflow {
    node [shape="box"]
    app_main [label="void app_main (void)
./suap_end_device/main/spi_lcd_touch_example_main.c:389"]
    app_main -> ESP_LOGI
    app_main -> ESP_ERROR_CHECK
    app_main -> gpio_config
    app_main -> spi_bus_initialize
    app_main -> example_notify_lvgl_flush_ready
    app_main -> esp_lcd_new_panel_io_spi
    app_main -> esp_lcd_new_panel_ili9341
    app_main -> esp_lcd_new_panel_gc9a01
    app_main -> esp_lcd_panel_reset
    app_main -> esp_lcd_panel_init
    app_main -> esp_lcd_panel_invert_color
    app_main -> esp_lcd_panel_mirror
    app_main -> esp_lcd_panel_disp_on_off
    app_main -> ESP_LCD_TOUCH_IO_SPI_STMPE610_CONFIG
    app_main -> esp_lcd_touch_new_spi_stmpe610
    app_main -> gpio_set_level
    app_main -> lv_init
    app_main -> heap_caps_malloc
    app_main -> assert
    app_main -> lv_disp_draw_buf_init
    app_main -> lv_disp_drv_init
    app_main -> example_lvgl_flush_cb
    app_main -> example_lvgl_port_update_callback
    app_main -> lv_disp_drv_register
    app_main -> example_increase_lvgl_tick
    app_main -> esp_timer_create
    app_main -> esp_timer_start_periodic
    app_main -> lv_indev_drv_init
    app_main -> example_lvgl_touch_cb
    app_main -> lv_indev_drv_register
    app_main -> encoder_init
    app_main -> main_encoder_cb
    app_main -> encoder1_read
    app_main -> encoder2_read
    app_main -> xSemaphoreCreateRecursiveMutex
    app_main -> xTaskCreate
    app_main -> example_lvgl_port_task
    app_main -> nvs_flash_init
    app_main -> esp_netif_init
    app_main -> esp_event_loop_create_default
    app_main -> example_connect
    app_main -> example_lvgl_lock
    app_main -> example_lvgl_demo_ui
    app_main -> example_lvgl_unlock
    ESP_LOGI [label="ESP_LOGI()"]
    ESP_ERROR_CHECK [label="ESP_ERROR_CHECK()"]
    gpio_config [label="gpio_config()"]
    spi_bus_initialize [label="spi_bus_initialize()"]
    example_notify_lvgl_flush_ready [label="bool example_notify_lvgl_flush_ready (esp_lcd_panel_io_handle_t panel_io, esp_lcd_panel_io_event_data_t *edata, void *user_ctx)
./suap_end_device/main/spi_lcd_touch_example_main.c:231"]
    example_notify_lvgl_flush_ready -> lv_disp_flush_ready
    lv_disp_flush_ready [label="lv_disp_flush_ready()"]
    esp_lcd_new_panel_io_spi [label="esp_lcd_new_panel_io_spi()"]
    esp_lcd_new_panel_ili9341 [label="esp_lcd_new_panel_ili9341()"]
    esp_lcd_new_panel_gc9a01 [label="esp_lcd_new_panel_gc9a01()"]
    esp_lcd_panel_reset [label="esp_lcd_panel_reset()"]
    esp_lcd_panel_init [label="esp_lcd_panel_init()"]
    esp_lcd_panel_invert_color [label="esp_lcd_panel_invert_color()"]
    esp_lcd_panel_mirror [label="esp_lcd_panel_mirror()"]
    esp_lcd_panel_disp_on_off [label="esp_lcd_panel_disp_on_off()"]
    ESP_LCD_TOUCH_IO_SPI_STMPE610_CONFIG [label="ESP_LCD_TOUCH_IO_SPI_STMPE610_CONFIG()"]
    esp_lcd_touch_new_spi_stmpe610 [label="esp_lcd_touch_new_spi_stmpe610()"]
    gpio_set_level [label="gpio_set_level()"]
    lv_init [label="lv_init()"]
    heap_caps_malloc [label="heap_caps_malloc()"]
    assert [label="assert()"]
    lv_disp_draw_buf_init [label="lv_disp_draw_buf_init()"]
    lv_disp_drv_init [label="lv_disp_drv_init()"]
    example_lvgl_flush_cb [label="void example_lvgl_flush_cb (lv_disp_drv_t *drv, const lv_area_t *area, lv_color_t *color_map)
./suap_end_device/main/spi_lcd_touch_example_main.c:238"]
    example_lvgl_flush_cb -> esp_lcd_panel_draw_bitmap
    esp_lcd_panel_draw_bitmap [label="esp_lcd_panel_draw_bitmap()"]
    example_lvgl_port_update_callback [label="void example_lvgl_port_update_callback (lv_disp_drv_t *drv)
./suap_end_device/main/spi_lcd_touch_example_main.c:250"]
    example_lvgl_port_update_callback -> esp_lcd_panel_swap_xy
    example_lvgl_port_update_callback -> esp_lcd_panel_mirror
    example_lvgl_port_update_callback -> esp_lcd_touch_set_mirror_y
    example_lvgl_port_update_callback -> esp_lcd_touch_set_mirror_x
    esp_lcd_panel_swap_xy [label="esp_lcd_panel_swap_xy()"]
    esp_lcd_touch_set_mirror_y [label="esp_lcd_touch_set_mirror_y()"]
    esp_lcd_touch_set_mirror_x [label="esp_lcd_touch_set_mirror_x()"]
    lv_disp_drv_register [label="lv_disp_drv_register()"]
    example_increase_lvgl_tick [label="void example_increase_lvgl_tick (void *arg)
./suap_end_device/main/spi_lcd_touch_example_main.c:321"]
    example_increase_lvgl_tick -> lv_tick_inc
    lv_tick_inc [label="lv_tick_inc()"]
    esp_timer_create [label="esp_timer_create()"]
    esp_timer_start_periodic [label="esp_timer_start_periodic()"]
    lv_indev_drv_init [label="lv_indev_drv_init()"]
    example_lvgl_touch_cb [label="void example_lvgl_touch_cb (lv_indev_drv_t *drv, lv_indev_data_t *data)
./suap_end_device/main/spi_lcd_touch_example_main.c:299"]
    example_lvgl_touch_cb -> esp_lcd_touch_read_data
    example_lvgl_touch_cb -> esp_lcd_touch_get_coordinates
    esp_lcd_touch_read_data [label="esp_lcd_touch_read_data()"]
    esp_lcd_touch_get_coordinates [label="esp_lcd_touch_get_coordinates()"]
    lv_indev_drv_register [label="lv_indev_drv_register()"]
    encoder_init [label="void encoder_init (void *callback, int index, int gpio_CLK, int gpio_DT, int gpio_BTN)
./suap_end_device/main/spi_lcd_touch_example_main.c:147"]
    encoder_init -> ESP_LOGI
    encoder_init -> ESP_ERROR_CHECK
    encoder_init -> pcnt_new_unit
    encoder_init -> pcnt_unit_set_glitch_filter
    encoder_init -> pcnt_new_channel
    encoder_init -> pcnt_channel_set_edge_action
    encoder_init -> pcnt_channel_set_level_action
    encoder_init -> pcnt_unit_add_watch_point
    encoder_init -> example_pcnt_on_reach
    encoder_init -> xQueueCreate
    encoder_init -> pcnt_unit_register_event_callbacks
    encoder_init -> pcnt_unit_enable
    encoder_init -> pcnt_unit_clear_count
    encoder_init -> pcnt_unit_start
    encoder_init -> gpio_wakeup_enable
    encoder_init -> esp_sleep_enable_gpio_wakeup
    encoder_init -> esp_light_sleep_start
    encoder_init -> iot_button_create
    encoder_init -> ESP_LOGE
    pcnt_new_unit [label="pcnt_new_unit()"]
    pcnt_unit_set_glitch_filter [label="pcnt_unit_set_glitch_filter()"]
    pcnt_new_channel [label="pcnt_new_channel()"]
    pcnt_channel_set_edge_action [label="pcnt_channel_set_edge_action()"]
    pcnt_channel_set_level_action [label="pcnt_channel_set_level_action()"]
    pcnt_unit_add_watch_point [label="pcnt_unit_add_watch_point()"]
    example_pcnt_on_reach [label="bool example_pcnt_on_reach (pcnt_unit_handle_t unit, const pcnt_watch_event_data_t *edata, void *user_ctx)
./suap_end_device/main/spi_lcd_touch_example_main.c:138"]
    example_pcnt_on_reach -> xQueueSendFromISR
    xQueueSendFromISR [label="xQueueSendFromISR()"]
    xQueueCreate [label="xQueueCreate()"]
    pcnt_unit_register_event_callbacks [label="pcnt_unit_register_event_callbacks()"]
    pcnt_unit_enable [label="pcnt_unit_enable()"]
    pcnt_unit_clear_count [label="pcnt_unit_clear_count()"]
    pcnt_unit_start [label="pcnt_unit_start()"]
    gpio_wakeup_enable [label="gpio_wakeup_enable()"]
    esp_sleep_enable_gpio_wakeup [label="esp_sleep_enable_gpio_wakeup()"]
    esp_light_sleep_start [label="esp_light_sleep_start()"]
    iot_button_create [label="iot_button_create()"]
    ESP_LOGE [label="ESP_LOGE()"]
    main_encoder_cb [label="void main_encoder_cb (uint32_t knobPosition)
./suap_end_device/main/spi_lcd_touch_example_main.c:109"]
    main_encoder_cb -> ESP_LOGI
    encoder1_read [label="void encoder1_read (lv_indev_drv_t *drv, lv_indev_data_t *data)
./suap_end_device/main/spi_lcd_touch_example_main.c:119"]
    encoder1_read -> pcnt_unit_get_count
    encoder1_read -> iot_button_get_event
    pcnt_unit_get_count [label="pcnt_unit_get_count()"]
    iot_button_get_event [label="iot_button_get_event()"]
    encoder2_read [label="void encoder2_read (lv_indev_drv_t *drv, lv_indev_data_t *data)
./suap_end_device/main/spi_lcd_touch_example_main.c:127"]
    encoder2_read -> pcnt_unit_get_count
    encoder2_read -> iot_button_get_event
    xSemaphoreCreateRecursiveMutex [label="xSemaphoreCreateRecursiveMutex()"]
    xTaskCreate [label="xTaskCreate()"]
    example_lvgl_port_task [label="void example_lvgl_port_task (void *arg)
./suap_end_device/main/spi_lcd_touch_example_main.c:340"]
    example_lvgl_port_task -> ESP_LOGI
    example_lvgl_port_task -> example_lvgl_lock
    example_lvgl_port_task -> lv_timer_handler
    example_lvgl_port_task -> example_lvgl_unlock
    example_lvgl_port_task -> vTaskDelay
    example_lvgl_port_task -> pdMS_TO_TICKS
    example_lvgl_lock [label="bool example_lvgl_lock (int timeout_ms)
./suap_end_device/main/spi_lcd_touch_example_main.c:327"]
    example_lvgl_lock -> pdMS_TO_TICKS
    example_lvgl_lock -> xSemaphoreTakeRecursive
    pdMS_TO_TICKS [label="pdMS_TO_TICKS()"]
    xSemaphoreTakeRecursive [label="xSemaphoreTakeRecursive()"]
    lv_timer_handler [label="lv_timer_handler()"]
    example_lvgl_unlock [label="void example_lvgl_unlock (void)
./suap_end_device/main/spi_lcd_touch_example_main.c:335"]
    example_lvgl_unlock -> xSemaphoreGiveRecursive
    xSemaphoreGiveRecursive [label="xSemaphoreGiveRecursive()"]
    vTaskDelay [label="vTaskDelay()"]
    nvs_flash_init [label="nvs_flash_init()"]
    esp_netif_init [label="esp_netif_init()"]
    esp_event_loop_create_default [label="esp_event_loop_create_default()"]
    example_connect [label="example_connect()"]
    example_lvgl_demo_ui [label="void example_lvgl_demo_ui (lv_disp_t *disp, lv_indev_t *encoder1i, lv_indev_t *encoder2i)
./suap_end_device/main/lvgl_demo_ui.c:393"]
    example_lvgl_demo_ui -> lv_disp_get_scr_act
    example_lvgl_demo_ui -> lv_group_create
    example_lvgl_demo_ui -> lv_menu_create
    example_lvgl_demo_ui -> lv_obj_set_size
    example_lvgl_demo_ui -> lv_disp_get_hor_res
    example_lvgl_demo_ui -> lv_disp_get_ver_res
    example_lvgl_demo_ui -> lv_obj_center
    example_lvgl_demo_ui -> lv_menu_page_create
    example_lvgl_demo_ui -> lv_btn_create
    example_lvgl_demo_ui -> lv_scr_act
    example_lvgl_demo_ui -> lv_obj_add_event_cb
    example_lvgl_demo_ui -> event_handler
    example_lvgl_demo_ui -> lv_obj_align
    example_lvgl_demo_ui -> lv_label_create
    example_lvgl_demo_ui -> lv_label_set_text
    example_lvgl_demo_ui -> lv_obj_add_flag
    example_lvgl_demo_ui -> lv_obj_set_height
    example_lvgl_demo_ui -> lv_group_add_obj
    example_lvgl_demo_ui -> lv_indev_set_group
    example_lvgl_demo_ui -> post_event_handler
    example_lvgl_demo_ui -> get_event_handler
    lv_disp_get_scr_act [label="lv_disp_get_scr_act()"]
    lv_group_create [label="lv_group_create()"]
    lv_menu_create [label="lv_menu_create()"]
    lv_obj_set_size [label="lv_obj_set_size()"]
    lv_disp_get_hor_res [label="lv_disp_get_hor_res()"]
    lv_disp_get_ver_res [label="lv_disp_get_ver_res()"]
    lv_obj_center [label="lv_obj_center()"]
    lv_menu_page_create [label="lv_menu_page_create()"]
    lv_btn_create [label="lv_btn_create()"]
    lv_scr_act [label="lv_scr_act()"]
    lv_obj_add_event_cb [label="lv_obj_add_event_cb()"]
    event_handler [label="void event_handler (lv_event_t *e)
./suap_end_device/main/lvgl_demo_ui.c:307"]
    event_handler -> lv_event_get_code
    event_handler -> LV_LOG_USER
    event_handler -> lv_label_set_text_fmt
    lv_event_get_code [label="lv_event_get_code()"]
    LV_LOG_USER [label="LV_LOG_USER()"]
    lv_label_set_text_fmt [label="lv_label_set_text_fmt()"]
    lv_obj_align [label="lv_obj_align()"]
    lv_label_create [label="lv_label_create()"]
    lv_label_set_text [label="lv_label_set_text()"]
    lv_obj_add_flag [label="lv_obj_add_flag()"]
    lv_obj_set_height [label="lv_obj_set_height()"]
    lv_group_add_obj [label="lv_group_add_obj()"]
    lv_indev_set_group [label="lv_indev_set_group()"]
    post_event_handler [label="void post_event_handler (lv_event_t *e)
./suap_end_device/main/lvgl_demo_ui.c:363"]
    post_event_handler -> lv_event_get_code
    post_event_handler -> LV_LOG_USER
    post_event_handler -> register_rest_function
    post_event_handler -> lv_msgbox_create
    post_event_handler -> lv_layer_top
    post_event_handler -> lv_obj_add_event_cb
    post_event_handler -> mevent_cb
    post_event_handler -> lv_obj_center
    post_event_handler -> lv_group_add_obj
    post_event_handler -> lv_msgbox_get_close_btn
    post_event_handler -> lv_group_focus_obj
    register_rest_function [label="void register_rest_function (char *odgovor, const char *URL, int broj)
./suap_end_device/main/lvgl_demo_ui.c:198"]
    register_rest_function -> client_event_http_handler
    register_rest_function -> esp_http_client_init
    register_rest_function -> sprintf
    register_rest_function -> esp_http_client_set_post_field
    register_rest_function -> strlen
    register_rest_function -> esp_http_client_set_header
    register_rest_function -> esp_http_client_perform
    register_rest_function -> printf
    register_rest_function -> esp_http_client_get_status_code
    register_rest_function -> esp_http_client_get_content_length
    register_rest_function -> esp_err_to_name
    register_rest_function -> esp_http_client_cleanup
    client_event_http_handler [label="esp_err_t client_event_http_handler (esp_http_client_event_handle_t evt)
./suap_end_device/main/lvgl_demo_ui.c:84"]
    client_event_http_handler -> ESP_LOGD
    client_event_http_handler -> memset
    client_event_http_handler -> MIN
    client_event_http_handler -> memcpy
    client_event_http_handler -> esp_http_client_get_content_length
    client_event_http_handler -> calloc
    client_event_http_handler -> ESP_LOGE
    client_event_http_handler -> ESP_LOGI
    client_event_http_handler -> ESP_LOG_BUFFER_HEX
    client_event_http_handler -> free
    client_event_http_handler -> esp_tls_get_and_clear_last_error
    client_event_http_handler -> esp_http_client_set_header
    client_event_http_handler -> esp_http_client_set_redirection
    ESP_LOGD [label="ESP_LOGD()"]
    memset [label="memset()"]
    MIN [label="MIN()"]
    memcpy [label="memcpy()"]
    esp_http_client_get_content_length [label="esp_http_client_get_content_length()"]
    calloc [label="calloc()"]
    ESP_LOG_BUFFER_HEX [label="ESP_LOG_BUFFER_HEX()"]
    free [label="free()"]
    esp_tls_get_and_clear_last_error [label="esp_tls_get_and_clear_last_error()"]
    esp_http_client_set_header [label="esp_http_client_set_header()"]
    esp_http_client_set_redirection [label="esp_http_client_set_redirection()"]
    esp_http_client_init [label="esp_http_client_init()"]
    sprintf [label="sprintf()"]
    esp_http_client_set_post_field [label="esp_http_client_set_post_field()"]
    strlen [label="strlen()"]
    esp_http_client_perform [label="esp_http_client_perform()"]
    printf [label="printf()"]
    esp_http_client_get_status_code [label="esp_http_client_get_status_code()"]
    esp_err_to_name [label="esp_err_to_name()"]
    esp_http_client_cleanup [label="esp_http_client_cleanup()"]
    lv_msgbox_create [label="lv_msgbox_create()"]
    lv_layer_top [label="lv_layer_top()"]
    mevent_cb [label="void mevent_cb (lv_event_t *e)
./suap_end_device/main/lvgl_demo_ui.c:297"]
    mevent_cb -> lv_event_get_target
    mevent_cb -> lv_obj_get_child
    mevent_cb -> LV_UNUSED
    mevent_cb -> LV_LOG_USER
    mevent_cb -> lv_label_get_text
    mevent_cb -> lv_obj_del
    lv_event_get_target [label="lv_event_get_target()"]
    lv_obj_get_child [label="lv_obj_get_child()"]
    LV_UNUSED [label="LV_UNUSED()"]
    lv_label_get_text [label="lv_label_get_text()"]
    lv_obj_del [label="lv_obj_del()"]
    lv_msgbox_get_close_btn [label="lv_msgbox_get_close_btn()"]
    lv_group_focus_obj [label="lv_group_focus_obj()"]
    get_event_handler [label="void get_event_handler (lv_event_t *e)
./suap_end_device/main/lvgl_demo_ui.c:326"]
    get_event_handler -> lv_event_get_code
    get_event_handler -> LV_LOG_USER
    get_event_handler -> get_rest_function
    get_event_handler -> extract_relevant_data
    get_event_handler -> sprintf
    get_event_handler -> lv_label_set_text_fmt
    get_event_handler -> printf
    get_event_handler -> lv_msgbox_create
    get_event_handler -> lv_layer_top
    get_event_handler -> lv_obj_add_event_cb
    get_event_handler -> mevent_cb
    get_event_handler -> lv_obj_center
    get_event_handler -> lv_group_add_obj
    get_event_handler -> lv_msgbox_get_close_btn
    get_event_handler -> lv_group_focus_obj
    get_rest_function [label="void get_rest_function (char *return_data, char *odgovor, const char *URL, const char *QUERY)
./suap_end_device/main/lvgl_demo_ui.c:244"]
    get_rest_function -> client_event_http_handler
    get_rest_function -> esp_http_client_init
    get_rest_function -> esp_http_client_set_header
    get_rest_function -> esp_http_client_perform
    get_rest_function -> printf
    get_rest_function -> esp_http_client_get_status_code
    get_rest_function -> esp_http_client_get_content_length
    get_rest_function -> sprintf
    get_rest_function -> esp_err_to_name
    get_rest_function -> esp_http_client_cleanup
    get_rest_function -> strcpy
    strcpy [label="strcpy()"]
    extract_relevant_data [label="int extract_relevant_data (char *json)
./suap_end_device/main/lvgl_demo_ui.c:46"]
    extract_relevant_data -> cJSON_Parse
    extract_relevant_data -> printf
    extract_relevant_data -> cJSON_GetObjectItemCaseSensitive
    extract_relevant_data -> cJSON_IsNumber
    extract_relevant_data -> cJSON_Delete
    cJSON_Parse [label="cJSON_Parse()"]
    cJSON_GetObjectItemCaseSensitive [label="cJSON_GetObjectItemCaseSensitive()"]
    cJSON_IsNumber [label="cJSON_IsNumber()"]
    cJSON_Delete [label="cJSON_Delete()"]
    encoder_handler_task [label="void encoder_handler_task (void *arg)
./suap_end_device/main/spi_lcd_touch_example_main.c:361"]
    encoder_handler_task -> ESP_LOGI
    encoder_handler_task -> xQueueReceive
    encoder_handler_task -> pdMS_TO_TICKS
    encoder_handler_task -> ESP_ERROR_CHECK
    encoder_handler_task -> pcnt_unit_get_count
    encoder_handler_task -> vTaskDelay
    xQueueReceive [label="xQueueReceive()"]
    http_download_chunk [label="void http_download_chunk (void)
./suap_end_device/main/lvgl_demo_ui.c:178"]
    http_download_chunk -> client_event_http_handler
    http_download_chunk -> esp_http_client_init
    http_download_chunk -> esp_http_client_perform
    http_download_chunk -> ESP_LOGI
    http_download_chunk -> esp_http_client_get_status_code
    http_download_chunk -> esp_http_client_get_content_length
    http_download_chunk -> ESP_LOGE
    http_download_chunk -> esp_err_to_name
    http_download_chunk -> esp_http_client_cleanup
}
