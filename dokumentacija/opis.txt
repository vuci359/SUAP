LVGL - library za grafičko sučelje

spi_lcd_touch - primjer koda na kojem se bazira programsko rješenje
 podrška za touch panel se ne koristi jer ga ekran nema -> potrebna dodatna programsk podrška za rad s ulaznim uređajima

esp_lcd_ili9341 - driver za display

ekran ST7789 radi s driverom za ili9341 -> ona ugrađen driver za ST7789
početna točka prikaza nije (0,0) -> sklopovski pomaknuta na drugo mjesto
                                -> dio piksela jednostvano ne postoji na supstratu
    pomak početne točke prikaza nije dokumentiran -> potrebno njuškati po programskom kodu drivera
    postoji više verzija ekrana ST7789 različitih rezolucija
    kod ažuriranja vidljivi ostavi slike koja je bila prikazana prije (loš ekran?, loš driver/ nepopuno prepisivanje piksela?, parazitski kapaciteti?)
    LCD LED ekran

spi_lcd_touch_example_main - programski kod za inicijalizaciju i pokretanje grafičkog sučelja
lvgl_demo_ui - programski kod za grafičko sučelje

kratko o ESP32
    Espressif
    Kina
    jeftini
    močni
    šlampavo napravljeni
    popularni
    gutači struje
    skupovi hardverski implementirane funkcionalnosti ovise o modelu i ciljanoj potrošnji energije
    neki stariji ESP modeli se više ne proizvode
        esp8266
        npr. atmega325 se proizvodi veš preko 20 godina, treba referenca
        https://spectrum.ieee.org/chip-hall-of-fame-atmel-atmega8
        1990-e?

STRAPPING pinovi - imaju problema sami sa sobom
    statistički značajan dio UI pinova
    služe za podešavnje parametara za pokretanje
    čita ih bootloader
    moguće korištenje za debugiranje kod pokretanja
    potrebno je pažljivo spajati pariferije (poštivanje ograničenja)
    kao posljedica nepravinog korištenja onemogućavaje ure neke fukcije uređaja
        boot
        spajanje na uart
        flash
        korištenje ugrađene vanjske SPI memorije

ESP32 has 6 strapping pins:

    GPIO 0 – pulled up – used to set flash or download boot.
    GPIO 2 – pulled down – used with GPIO 0 to select download boot.
    GPIO 4 – pulled down – but doesn’t seem to be used.
    GPIO 5 – pulled up – related to SDIO modes.
    GPIO 12 (MTDI) – pulled down – SDIO voltage level.
    GPIO 15 (MTDO) – pulled up – SDIO mode and diagnostic printing on boot.
 detaljije u datasheetu
 interni pullUP/DOWN se ne poništava ako nije drugačije podešeno u programu

enkoderi koriste brojač impulsa, kratica PCNT
neke verzije ESP32 nemaju hardverski PCNT, npr. ESP32-C linija, impulse je potrebno obraditi sklopovski

opis rada enkodera
enkoder EC11 ima 2 dijela
    gumb: upravljenja isto kao i za obični gumb
    rotirajući generator impulsa s dva izlaza koji su pomaknuti za četvrtinu faze
oznake izlaza: A i B
    pri okretanju u smjeru kazaljke na satu izlaz A se zove još i CLK, a izlaz B DT(data). Pri obrnutom bmjeru okretanja i njihove su uloge zamijenjene
        - potrebno je podesiti brojač impulsa za obje mogućnosti

opis PCNT
    broji (rastuće ili padajuče bridove) ili razine signala
    nekoliko višekanalnih brojača
    tipične primjene:
        određivanje frekvencije signala brojenjem impulsa u vremenskom intervalu
        dekodiranje kvadratnih signala u brzinu i smjer -> rad s enkoderima
    kritične točke -> generiranje događaja
        -> npr svakih X impulsa
        -> callback funkcije za obradu događaja
    moguće kompenzirati gubitke zbog preljeva -> za primjenu enkoera u sklopu ovog projekta nije kritično uhvatiti sve pomake enkodera
    sigurnost izvođenja
        neke ugrađene funkcije se mogu garantirano previlno izvesti u kontekstu različitih dretvi
            pcnt_new_unit()
            pcnt_new_channel()
        u prekidnim potprogramima se smiju izvoditi
            pcnt_unit_start()
            pcnt_unit_stop()
            pcnt_unit_clear_count()
            pcnt_unit_get_count()
        funkcije koje kao prvi argument primaju pcnt_unit_handle_t i pcnt_channel_handle_t
            ne smatraju se sigurnima za istovremeno izvođeje u kontekstu više dretvi
            izbjegavati korištenje u zadacima

LVGL zahtijeva instanciranje drivera pa instanciranje uređaja
    popularna grafička biblioteka napisana u C-u
    obično se koristi za mikrokontrolera
    zahtjeva pisanje relativno velike količine programskog koda za složeniju funkcionalnost
    napradne funkcije slabo dokumentirane
    definirani mnogi grafički elementi koje je potrebno samo podesiti i grupirati
    podržani različiti načini odabira elemenata
    funkcionalnost povezena s elementima se poziva korištenjem callback funkcija
    koristi ugrađane strukture podataka za opis komunikacije sa spojenim uređajima
    proziva ulazne uređaje


lvgl_indev_drv_t nije driver, nego je struktura podataka koja pamti podatke o vrsti ulaznog uređaja i referencu na funkciju koja iz drivera uzima podatke
koristi se standardni ESP-ov driver za enkoder koji koristi PCNT hardverski brojač impulsa iz kojega izvlači broj impulsa za meni.
u lvgl dokumentaciji fali opis za taj dio -> treba kopati po forumima

lijevi enkoder je povezan s funkcijama za kontrolu krajnjeg uređaja, a desni s funkcijama za komunikaciju s poslužiteljima
kao primer funkcija za rad s uređajima koristi se brojač pritisaka na gumbe

kao primjer informacijske komunikacije s poslužiteljem šalje se trenutni brojač, a kao odgovor na zahtjev u poruci se ispisuje statistika s poslužiteljima
na sličan način je, zamjenom podataka koji se šalju, moguće stvoriti i upravljačke poruke

driver/pulse_cnt.h - driver za hardverski brojač impulsa za enkoder
iot_button.h - esp-ov driver za gumb s automatskim prepoznavanjem različitih stanjaeclipse
za rad s enkoderom se koriste dva drivera: driver za prepoznavanje rotacijskih impulsa i driver za ugrađeni gumb.
Driveri su podešeni za rad u istoj inicijalizacijskoj funkciji unutar glavnog programa

backend napisan u C# uredno vraća podatke u dijelovima (fragmentirano)
    rješavanje fragmentacije na backendu nije poželjno -> mikrokontroler se mora moći spojiti na različite poslužitelje s različitim postavkama fragmentacije
chunked http response data -> nema dokumentacije, treba njuškati po forumuma https://esp32.com/viewtopic.php?t=18930
postoji komentar u promjerima
umjesto provjere dali postoje chunkovi stavljeno true, moglo bi izazivati problem za dulje JSON stringove
postoji više verzija primjera HTTP handlera, nisu sve jednako sposobne. Najsloženija rješava problem uz modifikaciju (if(true))

kad se umjesto provjere je li paket fragmentiran stavi true, onda proradi, a kad se uvjet izbriše onda ne (pregažene istoimene varijable?)

OPIS FUNKCIONALNOSTI UREĐAJA

    dijelovi sustava
        krajnji uređaji tipa suap_end_device
        poslužitelji s REST APIjem različitih vrsta
        teoratski je moguće u sustavu imati više poslužitelja i više krajnjih čvorova
        registracija se za trenutnu implementaciju obavlja ručno
            krajnji čvor zna adresu poslužitelja
            poslužitelj za trenutno implementiranu funkcionalnost ne treba znati adresu čvora

    korisni podaci
        uređaj prema poslužitelju
            brojač pritisaka na gum s lijevim enkoderom
        poslužitelj prema uređaju
            agregirani podaci
                brojač pristiglih poruka
                zadnja poznata vrijednost brojača pritisaka koja je poslana na poslužitelj
                prsječna vrijednost brojača pritisaka (uračunata i početna 0, greška se smanjuje s vremenom)

    suap_end_device
        na ekranu prikazuje minimalno korisničko sučelje
        u trenutnoj immplementaciji šalje zahtjeve prema REST API poslužitelju
            POST
                šalje se trenutni brojač i ispisuje poruka sa statusom
            GET
                dohvaćaju se agregirani podaci


    suap_api_server
        u trenutnoj implementaciji podržava
            primanje unaprijed definiranih podataka s krajnjeg uređaja u njihovo agregatiranje
            slanje agregatiranih podataka na krajnji uređaj na zahtjev
        REST API
        .net framework
        programski jezik C#
        ne koristi sloj za perzistenciju podataka
        podaci se agregatiraju u statičkom objektu
            mogući problemi zbog višedretvenosti
            prioritet je stavljena na komunikaciju, a ne na točnu i sigurnu obradu podataka
        .net stvara prosece po potrebi pa je bez sloja prezistencije potrebno spremati podatke u statičkom kontekstu
            dovoljno dobro za trenutni stupanj razvoja

    ograničenja
        krajnji čvor i poslužitelj implementiraju minimalnu funkcionalnost za demonstraciju ideje
        krajnji čvor nije lako konfigurabilan
        poslužitelj ne koristi sloj prezistencije
        nema automatske registracije poslužitelja i krajnjih čvorova
            potreban jedan stalno aktivan poslužitelj koji vodi brigu o registriranim uređajimas
        nije podržano pobuđivanje krajnjeg čvora preko poslužitelja
            moguće rješiti korištenjem dretve koja se periodički poziva ili stavljanjem dodatnog REST API poslužitelja na krajnji čvor
        krajnji čvor koristi programski kod koji je zahtjevan za izvođenje
        ESP32 ne voli fragmentirane pakete

    prednosti
        lako proširiva funkcionalnost
        korištenje standardnih komponenti
        pristupačni uređaji
            staro rečunalo s instaliranom distribucijom Linuxa
            jeftini mikrokontroleri
        moguće je preraditi krajnji čvor za rad s različitim mikrokontrolerima
